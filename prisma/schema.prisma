// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  password String

  orders  Order[]
  reviews Review[]
  cart    Cart?

  @@map("users")
}

model Category {
  id String @id @default(uuid())

  name String @unique

  products Product[]

  @@map("categories")
}

model Product {
  id String @id @default(uuid())

  name        String
  description String
  price       Int
  images      String[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  orderItems OrderItem[]
  reviews    Review[]

  CartItem CartItem[]

  @@map("products")
}

model Cart {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id String @id @default(uuid())

  quantity Int? @default(1)

  cart   Cart?  @relation(fields: [cartId], references: [id])
  cartId String @map("cart_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String   @map("product_id")

  @@map("cart_items")
}

// model Favorites {
//   id        String   @id @default(uuid())

//   products Product[]

//   user   User   @relation(fields: [userId], references: [id])
//   userId String @unique @map("user_id")

//   @@map("favorites")
// }

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status     EnumOrderStatus @default(PENDING)
  totalPrice Int             @map("total_price")

  orderItems OrderItem[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int? @default(1)
  price    Int

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String?
  rating Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("reviews")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
  CANCELED
}
